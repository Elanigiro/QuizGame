import { Question } from "../payload/Question.js";
import { QuestionList } from "../payload/QuestionList.js";
import { User } from "../payload/User.js";
import { UserScore } from "../payload/UserScore.js";

/**
 * Static class to handle all REST requests/responses to the Back-End
 */
class ClientSideREST {

    static URL_QUIZ_Q = "/quiz/questions";
    static URL_LDRBOARD = "/users?leaderboard=true";
    static URL_USER = "/users";
    static URL_USER_SRCH_BY_USRNM = "/users/?username";
    static URL_USER_SCORES = /* '/users/:id/' */"scores";

    /**
     * @throws {Error}
     */
    constructor () {

        throw new Error('Constructor Not Available!');
    }

    /**
     * 
     * @param {number} id 
     * @returns {Promise<Question>}
     */
    static async fetchOneQuestion(id) {

        if ((parseInt(id) !== id) || (id <= 0)) {

            throw new Error('id must be a positive integer!');
        }

        const res = await fetch(`${this.URL_QUIZ_Q}/${id}`);

        if (!res.ok) {

            throw new Error(`Request was unsuccessful!\n Code: ${res.status}`);
        }

        const responseJson = await res.json();

        return Question.fromJson(responseJson);
    }

    /**
     * @param {number} topicId
     * @param {number} limit
     * @param {boolean} random
     * @returns {Promise<QuestionList>}
     */
    static async fetchQuizQuestionList(topicId, limit, random) {

        const res = await fetch(`${this.URL_QUIZ_Q}/${topicId}?limit=${limit}&random=${random}`);

        if (!res.ok) {

            throw new Error(`Request was unsuccessful!\n Code: ${res.status}`);
        }

        const responseJson = await res.json();

        return QuestionList.fromJson(responseJson);
    }

    /**
     * @returns {Promise<UserScore[]>}
     */
    static async fetchLeaderboard() {

        const res = await fetch(`${this.URL_LDRBOARD}`);

        if (!res.ok) {

            throw new Error(`Request was unsuccessful!\n Code: ${res.status}`);
        }

        const responseJson = await res.json();

        return responseJson.map((item) => UserScore.fromJson(item));
    }

    /**
     * @param {string} username
     * @returns {Promise<string>}
     */
        static async postNewUser(username) {

            const res = await fetch(`${this.URL_USER}`, {
                method: 'POST',
                headers: {'Content-Type': 'text/plain;charset=UTF-8'},
                body: username,
            });
    
            if (!res.ok) {
    
                throw new Error(`Request was unsuccessful!\n Code: ${res.status}`);
            }
    
            return res.text(); //it's supposed to be the id generated by the server
        }


    /**
     * @param {UserScore} us
     * @returns {Promise<any>}
     */
    static async sendUserScore(us) {

        let userId = null;

        const res = await fetch(`${this.URL_USER_SRCH_BY_USRNM}=${us.username}`);

        if (res.ok) {

            const responseJson = await res.text();
            const usr = User.fromJson(responseJson);

            userId = usr.id;
        }
        else if (res.status === 404) {

            userId = await this.postNewUser(username);
        }
        else {

            throw new Error(`Request was unsuccessful!\n Code: ${res.status}`);
        }

        return fetch(`${this.URL_USER}/${userId}/${this.URL_USER_SCORES}`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json;charset=UTF-8'},
            body: JSON.stringify(us),
        });
    }
}

export {ClientSideREST};